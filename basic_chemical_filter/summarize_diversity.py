import argparse
import os
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib as mpl

# Use default matplotlib style rather than ggplot
mpl.style.use('default')

def plot_histograms(df, output_dir):
    """
    Generate histograms for chemical descriptors from the filtered CSV.
    """
    os.makedirs(output_dir, exist_ok=True)

    # These columns should exist in the CSV from the previous filter script
    # Adjust as needed if your CSV's column names differ.
    descriptors = [
        'MolecularWeight', 'HBA', 'HBD', 'TPSA',
        'RotatableBonds', 'DrugScore', 'LogP', 'NumAromaticRings'
    ]
    
    for desc in descriptors:
        if desc not in df.columns:
            # Skip if the column doesn't exist (just in case)
            continue
        
        plt.figure(figsize=(8, 6))
        plt.hist(df[desc].dropna(), bins=50, alpha=0.75)
        plt.title(f"{desc} Distribution")
        plt.xlabel(desc)
        plt.ylabel("Count")
        plt.savefig(os.path.join(output_dir, f"{desc}_histogram.png"))
        plt.close()
    print("Histograms saved to:", output_dir)

def main():
    parser = argparse.ArgumentParser(
        description="Generate summary stats and histograms from filtered molecule CSV."
    )
    parser.add_argument(
        "--input_csv",
        required=True,
        help="Path to the CSV file generated by the previous filter script."
    )
    parser.add_argument(
        "--output_dir",
        required=True,
        help="Directory to save histogram plots and the descriptor summary."
    )
    args = parser.parse_args()

    # Read the CSV
    df = pd.read_csv(args.input_csv)

    # Print and save summary statistics
    print("\nDescriptor Summary:")
    print(df.describe())
    summary_path = os.path.join(args.output_dir, "descriptor_summary.csv")
    os.makedirs(args.output_dir, exist_ok=True)
    df.describe().to_csv(summary_path)
    print(f"\nSummary statistics saved to: {summary_path}")

    # Generate histograms for the main numeric columns
    plot_histograms(df, args.output_dir)

if __name__ == "__main__":
    main()
